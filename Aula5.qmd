# Leitura de dados

Tendo visto os fundamentos básicos da programação em *R*, o próximo passo é aprender a efetuar a leitura de informações para o uso posterior na linguagem. Os dados são a estrutura básica das mais variadas ferramentas interativas geradas pela programação e também consistem na ferramenta fundamental para as constatações científicas empíricas, seja na economia, seja em qualquer outra ciência.

Os dados são armazenados em diversos tipos de arquivo, cada um deles com as suas respectivas propriedades e usuabilidade. Cada tipo de arquivo possui características que precisam ser levadas em consideração, seja na hora de elaborar uma base de dados do zero, seja na hora de ler uma base de dados pronta. Cabe ao usuário conhecer cada uma dessas propriedades e estar pronto para lidar com as particularidades dos mais variados tipos de arquivos.

Nesse capítulo, iremos conhecer as propriedades dos principais tipos de arquivos comumente utilizados para armazenar informações. Também aprenderemos sobre os principais tipos de dados e os seus possíveis usos. Por fim, serão expostas as principais técnicas que possibilitam a importação e a leitura de bases de dados previamente prontas para a linguagem *R*. O objetivo principal desse capítulo é repassar ao estudante o conhecimento necessário para que ele possa dominar a leitura de bases de dados em *R* por meio do domínio de técnicas de importação dos mais variados tipos de arquivo.

## O problema da memória

Um dos principais desafios enfrentados na construção de bases de dados é o tamanho dos arquivos. Processar grandes bases de dados exige um grande poder computacional uma vez que, quanto maior o volume de informações, maior é a requisição de memória computacional para realizar o processamento.

Uma base de dados geralmente é composta por objetos que são formados por linhas e colunas. Cada linha e cada coluna adicionada em um objeto aumenta o seu tamanho e por consequência aumenta também a quantidade de memória computacional necessária para processar essas informações. Em vista desse problema, a engenharia de dados está em uma busca constante por soluções que permitam reduzir o tamanho dos arquivos ou a quantidade de memória necessária para processá-lo. Uma das soluções mais fáceis e rápidas para tal é escolher um tipo de arquivo adequado para armazenar as informações. Por exemplo, bases de dados com poucas linhas e poucas colunas podem facilmente ser armazenadas em um arquivo excel, pois apesar de ser uma extensão que exige mais memória, o baixo volume de informações não impedirá um usuário use essa base de dados mesmo com uma máquina com baixo poder computacional. Em contrapartida, uma máquina comum com baixa capacidade de processamento terá dificuldades para gerenciar uma base de dados com inúmeras linhas e colunas armazenadas em um arquivo desse tipo.

Em vista desses conceitos, esse material lista a seguir as principais extensões de arquivos utilizados para armazenar informações nas bases de dados, esclarecendo as suas principais propriedades e usuabilidades, além de demosntrar as técnicas necessárias para abrir esses arquivos na linguagem *R*.

## Arquivos nativos da linguagem *R*

A linguagem *R* possui duas extensões de arquivos nativas, a extensão *.Rdata* e a extensão *.Rds*. Quando o usuário possui múltiplos objetos no seu ambiente de trabalho e deseja salvar todos esses objetos em um único arquivo, então o ideal é usar a extensão *.Rdata*. Esse procedimento também é conhecido como "salvar objetos como imagem". Nesse caso, o usuário pode salvar o seu ambiente de trabalho completo ou parte dele em um único arquivo que poderá ser usado posteriormente. Para demonstrar, vamos importar três bases de dados nativas para o ambiente de trabalho:

```{r}
base1 = mtcars
base2 = CO2
base3 = ChickWeight
```

Imagine que seja necessário salvar todo o ambiente de trabalho com as três bases de dados incluídas nele em um único arquivo. Nesse caso, salvar como uma imagem *.Rdata* pode ser a melhor alternativa. Para tanto, o primeiro passo é informar à linguagem em qual pasta da sua máquina os arquivos devem ser salvos. Isso é feito indicando um diretório de trabalho por meio do comando *setwd()*, indicando dentro do parênteses a pasta de interesse entre aspas. **Nota: no sistema Windows as barras à esquerda devem sempre ser substituídas por barras duplas na fixação do diretório de trabalho**.

```{r, eval=FALSE}
setwd("Endereço da pasta em que os arquivos serão salvos")
```

Após fixar o diretório de trabalho, o próximo passo é salvar o diretório de trabalho como imagem *.Rdata*. Para tanto, deve-se usar o comando *save.image()* e indicar o nome pelo qual o arquivo será salvo sucedido do indicativo do formato *.Rdata*. Por exemplo, imagine que queiramos salvar todo o ambiente de trabalho com o nome *bases_de_dados*. Nesse caso, deve-se proceder da seguinte maneira:

```{r, eval=FALSE}
save.image("bases_de_dados.Rdata")
```

Uma vez que o arquivo está salvo no seu diretório de trabalho com a extensão *.Rdata*, para importá-lo para a linguagem *R* basta usar o comando *load()* indicando no parênteses e entre aspas o nome do arquivo que será importado.

```{r, eval=FALSE}
load("bases_de_dados.Rdata")
```

Já a extensão *.rds* é aplicada quando o usuário quer salvar um único arquivo do ambiente de trabalho no diretório da sua máquina. Diferente da extensão *.Rdata*, na extensão *.rds* o salvamento dos arquivos ocorre com o comando *saveRDS()*, onde dentro do parênteses deve ser indicado o nome do objeto que está no ambiente de trabalho e que será salvo, sucedido do nome pelo qual o usuário deseja salvar o arquivo. Por exemplo, imagine que queiramos salvar o objeto de nome *base1* com o nome *base1.rds*. Nesse caso, devemos proceder conforme indicado a seguir:

```{r, eval=FALSE}
saveRDS(base1, file = "base1.rds")
```

Uma vez que o objeto está salvo com a extensão *.rds* na sua máquina, para importá-lo para a linguagem *R* basta usar o comando *readRDS()*, indicando no parênteses e entre aspas o nome do arquivo de interesse. Por exemplo, para ler o arquivo salvo com o nome *base1.rds* deve-se proceder conforme indicado a seguir:

```{r, eval=FALSE}
readRDS("base1.rds")
```
