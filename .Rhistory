for(j in 1:nchar(segredo)){
if(chute == substr(segredo, j, j)){
tracos[j] = chute
print(tracos)
}
}
sabe = readline("Conhece a palavra? ")
if(sabe == "sim"){
resposta = readline("Indique qual é a palavra: ")
if(resposta == segredo){
cat("\n----------------------------------------------------\n")
cat("------------Resposta correta-------------")
cat("\n----------------------------------------------------\n")
break
}else{
cat("Resposta errada")
cat(desenho[i])
}
}else{
cat(desenho[i])
}
}
palavras = c("caminhonete", "esquisofrenia", "geladeira", "juventude")
segredo = sample(palavras, 1)
tracos = rep("__", nchar(segredo))
letras = c()
palavras_chutadas = c()
for(i in 1:5){
chute = readline("Indique uma letra: ")
while(chute %in% letras){
cat("Você já escolheu essa letra")
chute = readline("Indique uma letra: ")
}
letras = rbind(letras, chute)
for(j in 1:nchar(segredo)){
if(chute == substr(segredo, j, j)){
tracos[j] = chute
print(tracos)
}
}
sabe = readline("Conhece a palavra? ")
if(sabe == "sim"){
resposta = readline("Indique qual é a palavra: ")
while (resposta %in% palavras_chutadas) {
cat("Você já chutou essa palavra")
resposta = readline("Indique qual é a palavra: ")
}
palavras_chutadas = rbind(palavras_chutadas, resposta)
if(resposta == segredo){
cat("\n----------------------------------------------------\n")
cat("------------------Resposta correta----------------------")
cat("------------------Você ganhou o jogo--------------------")
cat("\n----------------------------------------------------\n")
break
}else{
cat("Resposta errada")
cat(desenho[i])
}
}else{
cat(desenho[i])
}
}
segredo = sample(palavras, 1)
tracos = rep("__", nchar(segredo))
letras = c()
palavras_chutadas = c()
for(i in 1:5){
chute = readline("Indique uma letra: ")
while(chute %in% letras){
cat("Você já escolheu essa letra")
chute = readline("Indique uma letra: ")
}
letras = rbind(letras, chute)
for(j in 1:nchar(segredo)){
if(chute == substr(segredo, j, j)){
tracos[j] = chute
print(tracos)
}
}
sabe = readline("Conhece a palavra? ")
if(sabe == "sim"){
resposta = readline("Indique qual é a palavra: ")
while (resposta %in% palavras_chutadas) {
cat("Você já chutou essa palavra")
resposta = readline("Indique qual é a palavra: ")
}
palavras_chutadas = rbind(palavras_chutadas, resposta)
if(resposta == segredo){
cat("\n----------------------------------------------------\n")
cat("------------------Resposta correta----------------------\n")
cat("------------------Você ganhou o jogo--------------------\n")
cat("\n----------------------------------------------------\n")
break
}else{
cat("Resposta errada")
cat(desenho[i])
}
}else{
cat(desenho[i])
}
}
segredo = sample(palavras, 1)
tracos = rep("__", nchar(segredo))
for(i in 1:5){
print(tracos)
chute = readline("Indique uma letra: ")
while(chute %in% letras){
cat("Você já escolheu essa letra")
chute = readline("Indique uma letra: ")
}
letras = rbind(letras, chute)
for(j in 1:nchar(segredo)){
if(chute == substr(segredo, j, j)){
tracos[j] = chute
print(tracos)
}
}
sabe = readline("Conhece a palavra? ")
if(sabe == "sim"){
resposta = readline("Indique qual é a palavra: ")
while (resposta %in% palavras_chutadas) {
cat("Você já chutou essa palavra")
resposta = readline("Indique qual é a palavra: ")
}
palavras_chutadas = rbind(palavras_chutadas, resposta)
if(resposta == segredo){
cat("\n----------------------------------------------------\n")
cat("------------------Resposta correta----------------------\n")
cat("------------------Você ganhou o jogo--------------------\n")
cat("\n----------------------------------------------------\n")
break
}else{
cat("Resposta errada")
cat(desenho[i])
}
}else{
cat(desenho[i])
}
}
chute = readline("Indique uma letra: ")
letras = rbind(letras, chute)
for(j in 1:nchar(segredo)){
if(chute == substr(segredo, j, j)){
tracos[j] = chute
print(tracos)
}
}
sabe = readline("Conhece a palavra? ")
resposta = readline("Indique qual é a palavra: ")
cat("Você já chutou essa palavra")
resposta = readline("Indique qual é a palavra: ")
palavras_chutadas = rbind(palavras_chutadas, resposta)
if(resposta == segredo){
cat("\n----------------------------------------------------\n")
cat("------------------Resposta correta----------------------\n")
cat("------------------Você ganhou o jogo--------------------\n")
cat("\n----------------------------------------------------\n")
break
}else{
cat("Resposta errada")
cat(desenho[i])
}
}else{
cat(desenho[i])
}
}
palavras = c("caminhonete", "esquisofrenia", "geladeira", "juventude")
segredo = sample(palavras, 1)
tracos = rep("__", nchar(segredo))
letras = c()
palavras_chutadas = c()
for(i in 1:5){
print(tracos)
chute = readline("Indique uma letra: ")
while(chute %in% letras){
cat("Você já escolheu essa letra")
chute = readline("Indique uma letra: ")
}
letras = rbind(letras, chute)
for(j in 1:nchar(segredo)){
if(chute == substr(segredo, j, j)){
tracos[j] = chute
print(tracos)
}
}
sabe = readline("Conhece a palavra? ")
if(sabe == "sim"){
resposta = readline("Indique qual é a palavra: ")
while (resposta %in% palavras_chutadas) {
cat("Você já chutou essa palavra")
resposta = readline("Indique qual é a palavra: ")
}
palavras_chutadas = rbind(palavras_chutadas, resposta)
if(resposta == segredo){
cat("\n----------------------------------------------------\n")
cat("------------------Resposta correta----------------------\n")
cat("------------------Você ganhou o jogo--------------------\n")
cat("\n----------------------------------------------------\n")
break
}else{
cat("Resposta errada")
cat(desenho[i])
}
}else{
cat(desenho[i])
}
}
desenho = c(
"   ===============
||              I
||
||
||
||
||              O
||             /|\
||             / \
||             VIVO
||
/  \
/    \
--------------------
",
"   ===============
||              I
||              I
||
||
||
||              O
||             /|\
||             / \
||             VIVO
||
/  \
/    \
--------------------
",
"   ===============
||              I
||              I
||              I
||
||
||              O
||             /|\
||             / \
||             VIVO
||
/  \
/    \
--------------------
",
"   ===============
||              I
||              I
||              I
||              I
||
||              O
||             /|\
||             / \
||             VIVO
||
/  \
/    \
--------------------
",
"   ===============
||              I
||              I
||              I
||              I
||              I
||              O
||             /|\
||             / \
||          ENFORCADO
||
/  \
/    \
--------------------
Você perdeu a partida
"
)
palavras = c("caminhonete", "esquisofrenia", "geladeira", "juventude")
segredo = sample(palavras, 1)
tracos = rep("__", nchar(segredo))
letras = c()
palavras_chutadas = c()
for(i in 1:5){
print(tracos)
chute = readline("Indique uma letra: ")
while(chute %in% letras){
cat("Você já escolheu essa letra")
chute = readline("Indique uma letra: ")
}
letras = rbind(letras, chute)
for(j in 1:nchar(segredo)){
if(chute == substr(segredo, j, j)){
tracos[j] = chute
print(tracos)
}
}
sabe = readline("Conhece a palavra? ")
if(sabe == "sim"){
resposta = readline("Indique qual é a palavra: ")
while (resposta %in% palavras_chutadas) {
cat("Você já chutou essa palavra")
resposta = readline("Indique qual é a palavra: ")
}
palavras_chutadas = rbind(palavras_chutadas, resposta)
if(resposta == segredo){
cat("\n----------------------------------------------------\n")
cat("------------------Resposta correta----------------------\n")
cat("------------------Você ganhou o jogo--------------------\n")
cat("\n----------------------------------------------------\n")
break
}else{
cat("Resposta errada")
cat(desenho[i])
}
}else{
cat(desenho[i])
}
}
2 < 3 | 2 > 5
2 < 3 & 2 !4
2 < 3 & 2 != 4
invest = function(vi, i, t, tipo_juro, tipo_investimento){
# Inicialmente valos modelar o iof
if(t < 1/12){
iof = 0.3
}else{
iof = 0
}
# Agora vamos modelar o irpf
if(tipo_investimento != "poupança" | tipo_investimento != "lci" | tipo_investimento!= "lca" | tipo_investimento!= "cri" | tipo_investimento!= "cra"){
if(t<= 0.5){
irpf = 0.225
}else if(t > 0.5 & t <= 1){
irpf = 0.205
}else if(t > 1 & t <=3){
irpf = 0.175
}else{
irpf = 0.15
}
}else{
irpf = 0
}
# Agora vamos modelar o valor futuro bruto e o valor futuro líquido
if(tipo_juro == "composto"){
vfb = vi*(1+i)^t
vfl = vi + (vfb - vi)*(1-irpf)
}else {
vfb = vi*(1+i*t)
vfl = vi + (vfb-vi)*(1-irpf)
}
resultado = c("Valor bruto :", vfb, "<->", "Valor líquido :", vfl)
return(resultado)
}
invest(vi = 2500, i = 0.14, t = 5, tipo_juro = "composto", tipo_investimento = "lci")
clientes = read.csv(
file = "https://drive.google.com/uc?id=1zO8ekHWx9U7mrbx_0Hoxxu6od7uxJqWw&export=download",
header = TRUE, # indicando que a primeira linha contém o nome das colunas
sep = ",", # indicando que as colunas estão separadas por vírgula
range(10:20)
)
clientes = read.csv(
file = "https://drive.google.com/uc?id=1zO8ekHWx9U7mrbx_0Hoxxu6od7uxJqWw&export=download",
header = TRUE, # indicando que a primeira linha contém o nome das colunas
sep = ",", # indicando que as colunas estão separadas por vírgula
range(10:20)
)
?read.csv()
clientes = read.csv(
file = "https://drive.google.com/uc?id=1zO8ekHWx9U7mrbx_0Hoxxu6od7uxJqWw&export=download",
header = TRUE, # indicando que a primeira linha contém o nome das colunas
sep = ",", # indicando que as colunas estão separadas por vírgula
dec = ".", #indicando que o separador decimal é o ponto,
skip = 3 # pulando as três primeiras linhas da planilha
)
View(clientes)
clientes = read.csv(
file = "https://drive.google.com/uc?id=1zO8ekHWx9U7mrbx_0Hoxxu6od7uxJqWw&export=download",
header = FALSE, # indicando que a primeira linha contém o nome das colunas
sep = ",", # indicando que as colunas estão separadas por vírgula
dec = ".", #indicando que o separador decimal é o ponto,
skip = 3 # pulando as três primeiras linhas da planilha
)
View(clientes)
clientes = read.csv(
file = "https://drive.google.com/uc?id=1zO8ekHWx9U7mrbx_0Hoxxu6od7uxJqWw&export=download",
header = TRUE, # indicando que a primeira linha contém o nome das colunas
sep = ",", # indicando que as colunas estão separadas por vírgula
dec = ".", #indicando que o separador decimal é o ponto,
skip = c(2:4) # pulando as três primeiras linhas da planilha
)
View(clientes)
read.csv("https://drive.google.com/file/d/1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv/view?usp=sharing",skip = 3)
read.csv("https://drive.google.com/file/d/1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv/view?usp=sharing",skip = 3, header = T)
read.csv("https://drive.google.com/file/d/1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv&export=download",skip = 3, header = T)
read.csv("https://drive.google.com/file/d/1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv/view?usp=sharing",skip = 2, header = T)
dt = read.csv("https://drive.google.com/file/d/1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv/view?usp=sharing",skip = 2, header = T)
View(dt)
read.csv("https://drive.google.com/1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv&export=download",skip = 3, header = T)
read.csv("drive.google.com/uc?id=1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv&export=download",skip = 2, header = T)
read.csv("drive.google.com/uc?id=1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv&export=download",skip = 2, header = T)
clientes = read.csv(
file = "https://drive.google.com/uc?id=1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv&export=download",
header = TRUE, # indicando que a primeira linha contém o nome das colunas
sep = ",", # indicando que as colunas estão separadas por vírgula
dec = "." #indicando que o separador decimal é o ponto
)
clientes = read.csv(
file = "https://drive.google.com/uc?id=1vPCLNpy6LEhHDvQlHtFBu5L2QzB5bTnv&export=download",
header = TRUE, # indicando que a primeira linha contém o nome das colunas
sep = ",", # indicando que as colunas estão separadas por vírgula
dec = ".",skip=2 #indicando que o separador decimal é o ponto
)
?readxl::read_excel()
library(readxl)
dt = read_xls(
path = "https://drive.google.com/uc?id=141Tws9jifN8Lk4OpuyHpc9dATED9eZKC&export=download",
skip = 3,
col_names = TRUE
)
tp = tempfile()
download.file("https://drive.google.com/uc?id=141Tws9jifN8Lk4OpuyHpc9dATED9eZKC&export=download", destfile = tp)
dt = read_xls(
path = tp,
skip = 3,
col_names = TRUE
)
destfile <- tempfile(fileext = ".xls")
url <- "https://drive.google.com/uc?id=141Tws9jifN8Lk4OpuyHpc9dATED9eZKC&export=download"
download.file(url, destfile, mode = "wb")
dt = read_xls(
path = destfile,
skip = 3,
col_names = TRUE
)
View(dt)
View(dt)
D:/pnad2021 = "Z:\\URCA\\2024.1\\Intr.Prog.Dados\\Aula_VI"
D:\\pnad2021 = "Z:\\URCA\\2024.1\\Intr.Prog.Dados\\Aula_VI"
pnad2024 = "Z:\\URCA\\2024.1\\Intr.Prog.Dados\\Aula_VI"
pnad2024 = "Z:\\URCA\\2024.1\\Intr.Prog.Dados\\Aula_VI"
library(readr)
pnad202 = read_fwf(
file = "pnad2024\\PNADC_022024.txt",
fwf_cols(
Ano = c(1,4),
Trimestre = c(5, 5),
UF = c(6,7)
)
)
setwd("Z:\\URCA\\2024.1\\Intr.Prog.Dados\\Aula_VI")
pnad2024 = read_fwf(
file = "PNADC_022024.txt",
fwf_cols(
Ano = c(1,4),
Trimestre = c(5, 5),
UF = c(6,7)
)
)
dt = foreign::read.dta("https://drive.google.com/uc?id=176sePIlFsqMH9mrtueX9RtHJZmZtWd-0&export=download")
bookdown::build_chapter()
library(readr)
pnad = read_fwf(
"https://drive.google.com/uc?id=1Tv3qIA-Uiu7p5LRWWjET7h6gOYyhlGBi=download",
fwf_cols(
ano = c(1,4),
trimestre = c(5,5)
)
)
tp = tempfile()
download.file("https://drive.google.com/uc?id=1Tv3qIA-Uiu7p5LRWWjET7h6gOYyhlGBi=download", destfile = tp)
pnad = read_fwf(
"https://drive.google.com/uc?id=1Tv3qIA-Uiu7p5LRWWjET7h6gOYyhlGBi&export=download",
fwf_cols(
ano = c(1,4),
trimestre = c(5,5)
)
)
View(pnad)
tp = tempfile()
download.file("https://drive.google.com/uc?id=1Tv3qIA-Uiu7p5LRWWjET7h6gOYyhlGBi&export=download", destfile = tp)
pnad = read_fwf(
tp,
fwf_cols(
ano = c(1,4),
trimestre = c(5,5)
)
)
download.file("https://ftp.ibge.gov.br/Trabalho_e_Rendimento/Pesquisa_Nacional_por_Amostra_de_Domicilios_continua/Trimestral/Microdados/2024/PNADC_022024_20250815.zip", destfile = tp)
pnad = read_fwf(
unz(tp, "PNADC_022024_20250815.txt"),
fwf_cols(
ano = c(1,4),
trimestre = c(5,5)
)
)
pnad = read_fwf(
unz(tp, "PNADC_022024.txt"),
fwf_cols(
ano = c(1,4),
trimestre = c(5,5)
)
)
View(pnad)
View(pnad)
